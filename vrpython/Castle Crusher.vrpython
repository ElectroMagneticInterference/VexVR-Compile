{"mode":"Text","textContent":"# ------------------------------------------\n# \n# \tProject:      VEXcode Project\n#\tAuthor:       VEX\n#\tCreated:\n#\tDescription:  VEXcode VR Python Project\n# \n# ------------------------------------------\n\n# Library imports\nfrom vexcode import *\n\n#=+=+=+=+=+=+ Variables\nactive = True\n\n\n#=+=+=+=+=+=+ Main Function\ndef main():\n    global active\n    while active:\n        try:\n            findobject()\n            brain.print()\n            drivetrain.drive(FORWARD)\n            sweeping = True\n            while sweeping:\n                if not objNear:\n                    OS()\n                    sweeping = False\n                elif down_eye.detect(RED):\n                    OS()\n                    sweeping = False\n                wait(10,MSEC)\n        except:\n            active = False\n        wait(1,MSEC)\n\n#=+=+=+=+=+=+ Object Condition\ndef findobject():\n    brain.set_print_color(BLACK)\n    brain.print(\"\\n\\nSearching...\")\n    angle = location.position_angle(DEGREES)\n    drivetrain.turn(RIGHT)\n    while True:\n        if angle > location.position_angle(DEGREES):\n            drivetrain.stop()\n            brain.set_print_color(GREEN)\n            brain.print(\"\\nFinished!\")\n            raise Exception()\n        elif distance.found_object():\n            drivetrain.stop()\n            brain.set_print_color(GREEN)\n            brain.print(\"\\nObject Found\")\n            return True\n        wait(1,MSEC)\n\n#=+=+=+=+=+=+ General Purpose Functions\n#Object Sweeped\ndef OS():\n    drivetrain.stop()\n    drivetrain.turn_for(RIGHT,90,DEGREES)\n    brain.print(\"   Object Sweeped\")\n\n#if object is being pushed\ndef objNear():\n    distance.found_object()\n\n#=+=+=+=+=+=+ Initate\ndef __start():\n    brain.clear()\n    brain.set_print_color(GREEN)\n    brain.print(\"Initated:\\n\\n\")\n    brain.set_print_color(BLACK)\n    drivetrain.set_drive_velocity(100,PERCENT)\n    drivetrain.set_turn_velocity(100,PERCENT)\n    main()\n    brain.set_print_color(GREEN)\n    brain.print(f\"\\n\\nTime Elasped: {brain.timer_time(SECONDS)}\")\n    stop_project()\n\nvr_thread(__start())\n","textLanguage":"python","rconfig":[],"slot":0,"platform":"PG","sdkVersion":"","appVersion":"","fileFormat":"1.0.0","icon":"","playground":"CastleCrasher"}